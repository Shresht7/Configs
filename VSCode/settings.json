{
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[javascript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[markdown]": {
    "editor.defaultFormatter": "yzhang.markdown-all-in-one"
  },
  "[python]": {
    "editor.formatOnType": true
  },
  "[typescript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "aws.profile": "profile:default",
  "better-comments.tags": [
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#FF2D00",
      "italic": false,
      "strikethrough": false,
      "tag": "!",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#3498DB",
      "italic": true,
      "strikethrough": false,
      "tag": "?",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#474747",
      "italic": false,
      "strikethrough": true,
      "tag": "~~",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#FF8C00",
      "italic": false,
      "strikethrough": false,
      "tag": "todo",
      "underline": false
    },
    {
      "backgroundColor": "#E3E3E3",
      "bold": true,
      "color": "#3E3E3E",
      "italic": false,
      "strikethrough": false,
      "tag": "*",
      "underline": false
    }
  ],
  "cSpell.customDictionaries": {
    "custom-dictionary-user": {
      "addWords": true,
      "description": "Custom Dictionary",
      "name": "custom-dictionary-user",
      "path": "~/.config/.cspell/custom-dictionary-user.txt",
      "scope": "user"
    }
  },
  "cSpell.enableFiletypes": [
    "lua",
    "mdx",
    "powershell"
  ],
  "cSpell.language": "en,en-GB,en-US",
  "editor.accessibilitySupport": "off",
  "editor.cursorBlinking": "smooth",
  "editor.fontFamily": "CaskaydiaCove Nerd Font Mono, Cascadia Code, Consolas, 'Courier New', monospace",
  "editor.fontLigatures": true,
  "editor.fontSize": 12,
  "editor.fontWeight": "normal",
  "editor.formatOnSave": true,
  "editor.guides.highlightActiveIndentation": "always",
  "editor.inlayHints.enabled": "on",
  "editor.inlineSuggest.enabled": true,
  "editor.linkedEditing": true,
  "editor.minimap.enabled": true,
  "editor.quickSuggestions": {
    "comments": "on",
    "other": "on",
    "strings": "on"
  },
  "editor.quickSuggestionsDelay": 10,
  "editor.semanticHighlighting.enabled": true,
  "editor.stickyScroll.enabled": true,
  "editor.suggestSelection": "first",
  "editor.tokenColorCustomizations": {
    "keywords": "#F15152",
    "strings": "#91C499",
    "textMateRules": [
      {
        "name": "storage.type",
        "scope": "storage.type",
        "settings": {
          "fontStyle": "italic",
          "foreground": "#ffc711"
        }
      },
      {
        "name": "storage.modifier",
        "scope": "storage.modifier",
        "settings": {
          "fontStyle": "italic",
          "foreground": "#ad45d0"
        }
      },
      {
        "name": "support.class",
        "scope": "support.class",
        "settings": {
          "foreground": "#FFCB6B"
        }
      },
      {
        "name": "storage.type.function.arrow",
        "scope": "storage.type.function.arrow",
        "settings": {
          "fontStyle": ""
        }
      },
      {
        "name": "entity.name.class",
        "scope": "entity.name.class",
        "settings": {
          "foreground": "#ffffff"
        }
      },
      {
        "name": "keyword.operator.new",
        "scope": "keyword.operator.new",
        "settings": {
          "fontStyle": "bold",
          "foreground": "#7a7d7c"
        }
      }
    ],
    "types": "#829191"
  },
  "eslint.alwaysShowStatus": true,
  "eslint.codeAction.showDocumentation": {
    "enable": true
  },
  "excalidraw.theme": "auto",
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "explorer.fileNesting.patterns": {
    "*.asax": "$(capture).*.cs, $(capture).*.vb",
    "*.ascx": "$(capture).*.cs, $(capture).*.vb",
    "*.ashx": "$(capture).*.cs, $(capture).*.vb",
    "*.aspx": "$(capture).*.cs, $(capture).*.vb",
    "*.c": "$(capture).h",
    "*.cc": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.cpp": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.csproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.cxx": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.dart": "$(capture).freezed.dart, $(capture).g.dart",
    "*.ex": "$(capture).html.eex, $(capture).html.heex, $(capture).html.leex",
    "*.go": "$(capture)_test.go",
    "*.js": "$(capture).js.map, $(capture).min.js, $(capture).d.ts",
    "*.jsx": "$(capture).js",
    "*.master": "$(capture).*.cs, $(capture).*.vb",
    "*.pubxml": "$(capture).pubxml.user",
    "*.resx": "$(capture).*.resx, $(capture).designer.cs, $(capture).designer.vb",
    "*.ts": "$(capture).js, $(capture).*.ts",
    "*.tsx": "$(capture).ts",
    "*.vbproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.vue": "$(capture).*.ts, $(capture).*.js",
    ".clang-tidy": ".clang-format",
    ".env": "*.env, .env.*, env.d.ts",
    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
    "artisan": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, server.php, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, webpack.mix.js, windi.config.*",
    "astro.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "BUILD.bazel": "*.bzl, *.bazel, *.bazelrc, bazel.rc, .bazelignore, .bazelproject, WORKSPACE",
    "cargo.toml": ".clippy.toml, .rustfmt.toml, cargo.lock, clippy.toml, cross.toml, rust-toolchain.toml, rustfmt.toml",
    "CMakeLists.txt": "*.cmake, *.cmake.in, .cmake-format.yaml, CMakePresets.json",
    "composer.json": ".php*.cache, composer.lock, phpunit.xml*, psalm*.xml",
    "default.nix": "shell.nix",
    "dockerfile": ".dockerignore, docker-compose.yml, dockerfile*",
    "flake.nix": "flake.lock",
    "gatsby-config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, gatsby-browser.*, gatsby-node.*, gatsby-ssr.*, gatsby-transformer.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "gemfile": ".ruby-version, gemfile.lock",
    "go.mod": ".air*, go.sum",
    "index.d.ts": "*.d.ts",
    "mix.exs": ".credo.exs, .dialyzer_ignore.exs, .formatter.exs, mix.lock",
    "next.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, next-env.d.ts, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "nuxt.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "package.json": ".browserslist*, .circleci*, .codecov, .commitlint*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .mocha*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, api-extractor.json, apollo.config.*, appveyor*, ava.config.*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, cypress.json, dangerfile*, dprint.json, firebase.json, grunt*, gulp*, jasmine.*, jenkins*, jest.config.*, jsconfig.*, karma*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, nx.*, package-lock.json, playwright.config.*, pm2.*, pnpm*, prettier*, pullapprove*, puppeteer.config.*, renovate*, rollup.config.*, stylelint*, tsconfig.*, tsdoc.*, tslint*, tsup.config.*, turbo*, typedoc*, vercel*, vetur.config.*, vitest.config.*, webpack.config.*, workspace.json, xo.config.*, yarn*",
    "pubspec.yaml": ".metadata, .packages, all_lint_rules.yaml, analysis_options.yaml, build.yaml, pubspec.lock",
    "readme.*": "authors, backers.md, changelog*, citation*, code_of_conduct.md, codeowners, contributing.md, contributors, copying, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors.md",
    "remix.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, remix.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "rush.json": ".browserslist*, .circleci*, .codecov, .commitlint*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .mocha*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, api-extractor.json, apollo.config.*, appveyor*, ava.config.*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, cypress.json, dangerfile*, dprint.json, firebase.json, grunt*, gulp*, jasmine.*, jenkins*, jest.config.*, jsconfig.*, karma*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, nx.*, package-lock.json, playwright.config.*, pm2.*, pnpm*, prettier*, pullapprove*, puppeteer.config.*, renovate*, rollup.config.*, stylelint*, tsconfig.*, tsdoc.*, tslint*, tsup.config.*, turbo*, typedoc*, vercel*, vetur.config.*, vitest.config.*, webpack.config.*, workspace.json, xo.config.*, yarn*",
    "shims.d.ts": "*.d.ts",
    "svelte.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, mdsvex.config.js, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "vite.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "vue.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*"
  },
  "explorer.sortOrder": "type",
  "files.insertFinalNewline": true,
  "files.refactoring.autoSave": true,
  "git.autofetch": true,
  "git.branchProtection": [
    "main"
  ],
  "git.confirmSync": false,
  "github.copilot.enable": {
    "*": true,
    "markdown": true,
    "plaintext": false,
    "yaml": false
  },
  "githubIssues.issueBranchTitle": "issue${issueNumber}",
  "githubIssues.queries": [
    {
      "label": "My Issues",
      "query": "default"
    },
    {
      "label": "Created Issues",
      "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
    }
  ],
  "githubPullRequests.fileListLayout": "tree",
  "githubPullRequests.pullBranch": "never",
  "gitlens.advanced.messages": {
    "suppressLineUncommittedWarning": true
  },
  "gitlens.gitCommands.skipConfirmations": [
    "fetch:command",
    "switch:command"
  ],
  "gitlens.views.commits.files.layout": "tree",
  "gitlens.views.contributors.showStatistics": true,
  "go.toolsManagement.autoUpdate": true,
  "json.schemas": [
    {
      "fileMatch": [
        "app.json",
        "app.config.json"
      ],
      "name": "vscode-expo-manifest",
      "url": "file:///c%3A/Users/shres/AppData/Roaming/Code/User/globalStorage/bycedric.vscode-expo/manifest-44.0.0.json"
    }
  ],
  "Lua.completion.callSnippet": "Both",
  "Lua.completion.keywordSnippet": "Both",
  "Lua.hint.enable": true,
  "Lua.hint.paramName": "All",
  "Lua.hint.setType": true,
  "Lua.telemetry.enable": false,
  "Lua.workspace.library": [
    "C:/Users/shres/Documents/Divinity Original Sin 2 Modding/Modding-Tools/IDE-Helpers/"
  ],
  "Lua.workspace.preloadFileSize": 10000000,
  "material-icon-theme.activeIconPack": "react",
  "material-icon-theme.files.associations": {
    "reference.md": "Lib",
    "references.md": "Lib",
    "todo.md": "Todo",
    "todos.md": "Todo"
  },
  "material-icon-theme.folders.associations": {
    "__notes__": "Syntax",
    "__sample__": "Test"
  },
  "material-icon-theme.folders.color": "#ff7045",
  "material-icon-theme.hidesExplorerArrows": false,
  "material-icon-theme.saturation": 1,
  "materialTheme.accent": "Orange",
  "npm-intellisense.showBuildInLibs": true,
  "polacode.transparentBackground": true,
  "redhat.telemetry.enabled": false,
  "svelte.enable-ts-plugin": true,
  "svelte.plugin.svelte.note-new-transformation": false,
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.fontFamily": "CaskaydiaCove Nerd Font Mono, Cascadia Code, Consolas, 'Courier Now', monospace",
  "terminal.integrated.profiles.windows": {
    "Command Prompt": {
      "args": [],
      "icon": "terminal-cmd",
      "path": [
        "${env:windir}\\Sysnative\\cmd.exe",
        "${env:windir}\\System32\\cmd.exe"
      ]
    },
    "Git Bash": {
      "source": "Git Bash"
    },
    "PowerShell": {
      "icon": "terminal-powershell",
      "source": "PowerShell"
    }
  },
  "totalTypeScript.hideAllTips": false,
  "totalTypeScript.hideBasicTips": false,
  "vscode-edge-devtools.mirrorEdits": true,
  "vscodeMarkdownNotes.allowPipedWikiLinks": true,
  "vscodeMarkdownNotes.createNoteOnGoToDefinitionWhenMissing": false,
  "vscodeMarkdownNotes.workspaceFilenameConvention": "relativePaths",
  "vsintellicode.java.completionsEnabled": false,
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "window.autoDetectColorScheme": true,
  "window.menuBarVisibility": "compact",
  "window.zoomLevel": -1,
  "workbench.activityBar.visible": true,
  "workbench.colorCustomizations": {
    "[Material Theme Darker]": {
      "activityBar.activeBorder": "#FF7042",
      "activityBarBadge.background": "#FF7042",
      "breadcrumb.activeSelectionForeground": "#FF7042",
      "editor.findMatchBorder": "#FF7042",
      "editorSuggestWidget.highlightForeground": "#FF7042",
      "editorWidget.border": "#FF7042",
      "editorWidget.resizeBorder": "#FF7042",
      "list.activeSelectionForeground": "#FF7042",
      "list.highlightForeground": "#FF7042",
      "list.inactiveSelectionForeground": "#FF7042",
      "menu.selectionForeground": "#FF7042",
      "menubar.selectionForeground": "#FF7042",
      "notificationLink.foreground": "#FF7042",
      "panelTitle.activeBorder": "#FF7042",
      "pickerGroup.foreground": "#FF7042",
      "progressBar.background": "#FF7042",
      "scrollbarSlider.activeBackground": "#FF704250",
      "selection.background": "#FF704240",
      "settings.headerForeground": "#FF7042",
      "settings.modifiedItemIndicator": "#FF7042",
      "statusBarItem.remoteBackground": "#FF7042",
      "tab.activeBorder": "#FF7042",
      "textLink.foreground": "#FF7042"
    }
  },
  "workbench.colorTheme": "Community Material Theme Lighter",
  "workbench.editor.highlightModifiedTabs": true,
  "workbench.editor.pinnedTabSizing": "compact",
  "workbench.editorAssociations": {
    "*.lua": "default",
    "git-rebase-todo": "gitlens.rebase"
  },
  "workbench.iconTheme": "material-icon-theme",
  "workbench.preferredDarkColorTheme": "One Dark Pro Flat",
  "workbench.preferredHighContrastColorTheme": "One Dark Pro Darker",
  "workbench.preferredHighContrastLightColorTheme": "Community Material Theme Lighter High Contrast",
  "workbench.preferredLightColorTheme": "Community Material Theme Lighter",
  "workbench.sideBar.location": "right",
  "yaml.customTags": [
    "!And",
    "!And sequence",
    "!If",
    "!If sequence",
    "!Not",
    "!Not sequence",
    "!Equals",
    "!Equals sequence",
    "!Or",
    "!Or sequence",
    "!FindInMap",
    "!FindInMap sequence",
    "!Base64",
    "!Join",
    "!Join sequence",
    "!Cidr",
    "!Ref",
    "!Sub",
    "!Sub sequence",
    "!GetAtt",
    "!GetAZs",
    "!ImportValue",
    "!ImportValue sequence",
    "!Select",
    "!Select sequence",
    "!Split",
    "!Split sequence"
  ]
}
